/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 04 21:43:45 GMT 2025
 */

package evo.datastructures;

import datastructures.Account_ESTest_scaffolding;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import datastructures.Account;
import datastructures.Transaction;
import datastructures.TransactionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Account_ESTest extends Account_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      TransactionType transactionType0 = TransactionType.DEPOSIT;
      Transaction transaction0 = new Transaction((-1587), transactionType0, (-1587), "k");
      account0.addTransaction(transaction0);
      account0.getTransactions();
      assertEquals((-1587), account0.getPinNumber());
      assertEquals((-1587.0), account0.getBalance(), 0.01);
      assertEquals((-1587), account0.getAccountId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Account account0 = new Account((-1994), "", 0, 0.0);
      int int0 = account0.getPinNumber();
      assertEquals((-1994), account0.getAccountId());
      assertEquals(0.0, account0.getBalance(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Account account0 = new Account(0, "AccountCardNumber", 1047, 0);
      int int0 = account0.getPinNumber();
      assertEquals(1047, int0);
      assertEquals(0, account0.getAccountId());
      assertEquals(0.0, account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Account account0 = new Account(270, (String) null, 270, 451.7007243);
      account0.getCardNumber();
      assertEquals(451.7007243, account0.getBalance(), 0.01);
      assertEquals(270, account0.getAccountId());
      assertEquals(270, account0.getPinNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Account account0 = new Account(2087, "", 2087, 2087);
      account0.getCardNumber();
      assertEquals(2087.0, account0.getBalance(), 0.01);
      assertEquals(2087, account0.getPinNumber());
      assertEquals(2087, account0.getAccountId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Account account0 = new Account((-1994), "", 0, 0.0);
      double double0 = account0.getBalance();
      assertEquals(0, account0.getPinNumber());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1994), account0.getAccountId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Account account0 = new Account((-1), "`2AoW7L2", 2170, 2170);
      double double0 = account0.getBalance();
      assertEquals((-1), account0.getAccountId());
      assertEquals(2170, account0.getPinNumber());
      assertEquals(2170.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Account account0 = new Account(0, "", 0, (-4404.54329));
      int int0 = account0.getAccountId();
      assertEquals(0, int0);
      assertEquals((-4404.54329), account0.getBalance(), 0.01);
      assertEquals(0, account0.getPinNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Account account0 = new Account(270, (String) null, 270, 451.7007243);
      int int0 = account0.getAccountId();
      assertEquals(270, account0.getPinNumber());
      assertEquals(270, int0);
      assertEquals(451.7007243, account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Account account0 = new Account((-1994), "", 0, 0.0);
      account0.addTransaction((Transaction) null);
      // Undeclared exception!
      try { 
        account0.displayTransactionHistory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("datastructures.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Account account0 = new Account((-1994), "", 0, 0.0);
      String string0 = account0.toString();
      assertEquals("Account{Account ID: -1994, Card Number: , Pin: 0, Balance: 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      account0.displayTransactionHistory();
      assertEquals((-1587), account0.getPinNumber());
      assertEquals((-1587.0), account0.getBalance(), 0.01);
      assertEquals((-1587), account0.getAccountId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      account0.getTransactions();
      assertEquals((-1587), account0.getPinNumber());
      assertEquals((-1587), account0.getAccountId());
      assertEquals((-1587.0), account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      account0.setBalance((-1587));
      assertEquals((-1587), account0.getPinNumber());
      assertEquals((-1587), account0.getAccountId());
      assertEquals((-1587.0), account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      int int0 = account0.getAccountId();
      assertEquals((-1587), int0);
      assertEquals((-1587), account0.getPinNumber());
      assertEquals((-1587.0), account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      TransactionType transactionType0 = TransactionType.DEPOSIT;
      Transaction transaction0 = new Transaction((-1587), transactionType0, (-1587), "k");
      account0.addTransaction(transaction0);
      String string0 = account0.displayTransactionHistory();
      assertEquals((-1587.0), account0.getBalance(), 0.01);
      assertEquals((-1587), account0.getAccountId());
      assertEquals("Transaction{Transaction ID: -1587, Type: DEPOSIT, Amount: -1587.0, Date: 14.02.2014 20:21:21, Description: k}\n", string0);
      assertEquals((-1587), account0.getPinNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      String string0 = account0.displayAccountDetails();
      assertEquals("Account{Account ID: -1587, Card Number: k, Pin: -1587, Balance: -1587.0}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      double double0 = account0.getBalance();
      assertEquals((-1587), account0.getPinNumber());
      assertEquals((-1587.0), double0, 0.01);
      assertEquals((-1587), account0.getAccountId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      account0.getCardNumber();
      assertEquals((-1587), account0.getPinNumber());
      assertEquals((-1587), account0.getAccountId());
      assertEquals((-1587.0), account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Account account0 = new Account((-1587), "k", (-1587), (-1587));
      int int0 = account0.getPinNumber();
      assertEquals((-1587), account0.getAccountId());
      assertEquals((-1587.0), account0.getBalance(), 0.01);
      assertEquals((-1587), int0);
  }
}
