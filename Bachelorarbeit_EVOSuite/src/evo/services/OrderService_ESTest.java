/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 04 22:15:11 GMT 2025
 */

package evo.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import datastructures.Account;
import datastructures.Order;
import datastructures.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import services.OrderService;
import services.OrderService_ESTest_scaffolding;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class OrderService_ESTest extends OrderService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account((-1800), "eT,j^-V?}`", (-1800), 105);
      User user0 = new User(105, "<L*O1!Zi@P", "eT,j^-V?}`", "eT,j^-V?}`", "", account0);
      orderService0.createOrder(user0, 29);
      orderService0.payOrder(user0, 0);
      orderService0.shipOrder(user0, 0);
      assertEquals(76.0, account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account((-6097), "AccountID", 89, (-583.7));
      User user0 = new User((-6097), "+ycTGq:", "AccountID", "AccountID", "Dzr", account0);
      user0.addOrder((Order) null);
      // Undeclared exception!
      try { 
        orderService0.shipOrder(user0, 89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      // Undeclared exception!
      try { 
        orderService0.payOrder((User) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account((-400), "", (-400), (-400));
      User user0 = new User((-3212), "CREATED", "CREATED", "CREATED", "", account0);
      user0.addOrder((Order) null);
      // Undeclared exception!
      try { 
        orderService0.deliverOrder(user0, (-3212));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      // Undeclared exception!
      try { 
        orderService0.deliverOrder((User) null, 3715);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // User cannot be null.
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      // Undeclared exception!
      try { 
        orderService0.createOrder((User) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // User cannot be null.
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account(0, "7r", 0, 0);
      User user0 = new User(0, "7r", "7r", "7r", "7r", account0);
      orderService0.createOrder(user0, 650);
      // Undeclared exception!
      try { 
        orderService0.payOrder(user0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User balance is insufficient.
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      // Undeclared exception!
      try { 
        orderService0.shipOrder((User) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // User cannot be null.
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account(985, "[U", 985, 985);
      User user0 = new User(985, "[U", "[U", "[U", "[U", account0);
      orderService0.createOrder(user0, 985);
      try { 
        orderService0.deliverOrder(user0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // OrderState is invalid. Can't deliver order with state CREATED
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account((-974), "Acon5ID", (-974), (-974));
      User user0 = new User((-974), "Acon5ID", "Acon5ID", "Acon5ID", "Acon5ID", account0);
      try { 
        orderService0.createOrder(user0, (-974));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // OrderPrice must be greater than 1.
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account(90, ">@,<Np1X\u0003fBt*x", 90, 90);
      User user0 = new User(90, ">@,<Np1X\u0003fBt*x", ">@,<Np1X\u0003fBt*x", ">@,<Np1X\u0003fBt*x", ">@,<Np1X\u0003fBt*x", account0);
      orderService0.createOrder(user0, 90);
      orderService0.payOrder(user0, 0);
      assertEquals(0.0, account0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      User user0 = new User(2316, "User balance is insufficient.", "User balance is insufficient.", "User balance is insufficient.", "User balance is insufficient.", (Account) null);
      try { 
        orderService0.shipOrder(user0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Order with ID 0 not found.
         //
         verifyException("services.OrderService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrderService orderService0 = new OrderService();
      Account account0 = new Account((-3664), "OrderPrice must be greater than 1.", (-3664), 0);
      User user0 = new User(0, ")1k3:P", (String) null, "OrderPrice must be greater than 1.", ")1k3:P", account0);
      try { 
        orderService0.payOrder(user0, (-3664));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Order with ID -3664 not found.
         //
         verifyException("services.OrderService", e);
      }
  }
}
