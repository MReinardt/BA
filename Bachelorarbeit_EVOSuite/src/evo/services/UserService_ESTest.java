/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 04 22:21:17 GMT 2025
 */

package evo.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import datastructures.Account;
import datastructures.User;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import services.UserService;
import services.UserService_ESTest_scaffolding;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class UserService_ESTest extends UserService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      Account account0 = new Account((-407), "4Ms1+j", 0, 0);
      User user0 = new User((-407), "4Ms1+j", "4Ms1+j", "y66N", " ", account0);
      userService0.createUser(user0);
      boolean boolean0 = userService0.updateUser((-407), "User{User ID: -407, First Name: 4Ms1+j, Last Name: 4Ms1+j, Email: y66N, Phone Number:  , Orders: [Order{Order ID: -407, Status: CREATED, Price: 0}]}", "AccountBalance", "y66N", "", account0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      Account account0 = new Account(1102, "bs#Bcj", 1102, 1102);
      User user0 = new User(1102, "bs#Bcj", "bs#Bcj", "bs#Bcj", "bs#Bcj", account0);
      userService0.createUser(user0);
      userService0.deleteUser(1102);
      List<User> list0 = userService0.getUsers();
      assertFalse(list0.contains(user0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      Account account0 = new Account((-407), "4Ms1+j", 0, 0);
      User user0 = new User((-407), "4Ms1+j", "4Ms1+j", "y66N", " ", account0);
      userService0.createUser(user0);
      List<User> list0 = userService0.getUsers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      Account account0 = new Account(4454, "l@0BA,D[;z^#DW", 0, 0);
      User user0 = new User(0, "fc0<VG:>}", "fc0<VG:>}", "fc0<VG:>}", "l@0BA,D[;z^#DW", account0);
      linkedList0.add(user0);
      userService0.setUsers(linkedList0);
      User user1 = userService0.getUserById(0);
      assertEquals(0, user1.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      Account account0 = new Account(0, " +<h4CGOqkK2;-^mg", 395, 0);
      User user0 = new User(395, " +<h4CGOqkK2;-^mg", " +<h4CGOqkK2;-^mg", " +<h4CGOqkK2;-^mg", " +<h4CGOqkK2;-^mg", account0);
      linkedList0.add(user0);
      userService0.setUsers(linkedList0);
      User user1 = userService0.getUserById(395);
      assertEquals(" +<h4CGOqkK2;-^mg", user1.getPhoneNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      Account account0 = new Account((-407), "G7!s~q`+", (-407), (-407));
      User user0 = new User((-407), "y66N", "y66N", "&", "", account0);
      linkedList0.add(user0);
      User user1 = userService0.getUserById((-407));
      assertEquals("&", user1.getEmail());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      Account account0 = new Account((-407), "4Ms1+j", 0, 0);
      User user0 = new User((-407), "4Ms1+j", "4Ms1+j", "y66N", " ", account0);
      userService0.createUser(user0);
      user0.setId(0);
      int int0 = userService0.getLastUserId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      Account account0 = new Account(2452, "G7!s~q`+", 2452, 2452);
      User user0 = new User(2452, "G7!s~q`+", "G7!s~q`+", "y66N", " ", account0);
      userService0.createUser(user0);
      int int0 = userService0.getLastUserId();
      assertEquals(2452, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      Account account0 = new Account(4454, "l@0BA,D[;z^#DW", 0, 0);
      userService0.setUsers(linkedList0);
      User user0 = new User((-407), "", "", "", "", account0);
      userService0.createUser(user0);
      int int0 = userService0.getLastUserId();
      assertEquals((-407), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      Account account0 = new Account(505, "bZ8Asu&'LEFkg", 530, (-3429.317914740454));
      try { 
        userService0.updateUser(505, "User already exists with ID: ", "Account{", "User already exists with ID: ", "", account0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User not found with ID: 505
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserService userService0 = new UserService();
      Account account0 = new Account(0, "HgX~", 0, 0);
      // Undeclared exception!
      try { 
        userService0.updateUser(0, "B^E|l9y6b~%jO-mE,A", "HgX~", "B^E|l9y6b~%jO-mE,A", "B^E|l9y6b~%jO-mE,A", account0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      try { 
        userService0.getUserById((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User not found with ID: -1
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      // Undeclared exception!
      try { 
        userService0.getLastUserId();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userService0.setUsers(linkedList0);
      try { 
        userService0.deleteUser(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User not found with ID: 0
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserService userService0 = new UserService();
      // Undeclared exception!
      try { 
        userService0.createUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserService userService0 = new UserService();
      // Undeclared exception!
      try { 
        userService0.getUserById(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserService userService0 = new UserService();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      Account account0 = new Account(3426, "servi+es.UsrSerie", 3426, 3426);
      User user0 = new User(3426, "servi+es.UsrSerie", "servi+es.UsrSerie", "servi+es.UsrSerie", "servi+es.UsrSerie", account0);
      userService0.setUsers(linkedList0);
      userService0.createUser(user0);
      try { 
        userService0.createUser(user0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // User already exists with ID: 3426
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserService userService0 = new UserService();
      // Undeclared exception!
      try { 
        userService0.getLastUserId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserService userService0 = new UserService();
      // Undeclared exception!
      try { 
        userService0.deleteUser(1102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserService userService0 = new UserService();
      List<User> list0 = userService0.getUsers();
      assertNull(list0);
  }
}
