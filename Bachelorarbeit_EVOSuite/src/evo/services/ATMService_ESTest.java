/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 04 22:26:00 GMT 2025
 */

package evo.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import datastructures.Account;
import datastructures.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import services.ATMService;
import services.ATMService_ESTest_scaffolding;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ATMService_ESTest extends ATMService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      // Undeclared exception!
      try { 
        aTMService0.insertCard((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      try { 
        aTMService0.ejectCard();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error: No card to eject.
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      Account account0 = new Account((-17), "CARD_INSERTED", (-17), (-17));
      User user0 = new User((-17), "CARD_INSERTED", "CARD_INSERTED", "CARD_INSERTED", "CARD_INSERTED", account0);
      try { 
        aTMService0.transferMoney(user0, (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Not authenticated.
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      try { 
        aTMService0.depositMoney(2290.308);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Not authenticated.
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      try { 
        aTMService0.withdrawMoney((-564.62788));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Not authenticated.
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      try { 
        aTMService0.checkBalance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Not authenticated.
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      Integer integer0 = new Integer((-2584));
      try { 
        aTMService0.enterPin(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: PIN cannot be entered.
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      Account account0 = new Account((-694), "", (-694), 1.0);
      User user0 = new User((-694), "", "", "", "", account0);
      try { 
        aTMService0.insertCard(user0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error: Card cannot be accepted.
         //
         verifyException("services.ATMService", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ATMService aTMService0 = new ATMService();
      ATMService.State aTMService_State0 = aTMService0.getCurrentState();
      assertEquals(ATMService.State.IDLE, aTMService_State0);
  }
}
