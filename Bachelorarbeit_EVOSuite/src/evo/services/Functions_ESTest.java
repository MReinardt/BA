/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 26 09:59:08 GMT 2025
 */

package evo.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import services.Functions;
import services.Functions_ESTest_scaffolding;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Functions_ESTest extends Functions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("services.Functions");
      String string0 = Functions.findMin((List<String>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("services.Functions");
      linkedList0.add("");
      String string0 = Functions.findMax((List<String>) linkedList0);
      assertEquals("services.Functions", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams("@", "F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams("Divider cannot be zero", "List is empty or null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Functions functions0 = new Functions();
      int[] intArray0 = new int[0];
      int int0 = functions0.sumArrayWrong(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Functions functions0 = new Functions();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-689));
      linkedList0.add(integer0);
      boolean boolean0 = functions0.containsElementWrong(linkedList0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Functions functions0 = new Functions();
      boolean boolean0 = functions0.isEvenWrong((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Functions functions0 = new Functions();
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      int int0 = functions0.sumArrayWrong(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Functions functions0 = new Functions();
      int[] intArray0 = new int[7];
      intArray0[2] = (-1953);
      int int0 = functions0.sumArrayWrong(intArray0);
      assertEquals((-1953), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.divideWrong(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.divideWrong(2085, (-1226));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.divide(0, (-572));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.divide((-1749), 2);
      assertEquals((-874), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.addWrong(1848, 0);
      assertEquals(1848, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.addWrong(0, 180);
      assertEquals((-180), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.add(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.add((-572), (-2388));
      assertEquals((-2960), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Functions functions0 = new Functions();
      // Undeclared exception!
      try { 
        functions0.sumArrayWrong((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        Functions.findMin((List<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst((String) null);
      // Undeclared exception!
      try { 
        Functions.findMax((List<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Functions functions0 = new Functions();
      // Undeclared exception!
      try { 
        functions0.divideWrong(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Functions functions0 = new Functions();
      // Undeclared exception!
      try { 
        functions0.containsElementWrong((List<Integer>) null, 567);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("u7H(+q<\"/");
      linkedList0.add("");
      String string0 = Functions.findMin((List<String>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        Functions.findMin((List<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // List is empty or null
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.findMin((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // List is empty or null
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("CV");
      linkedList0.add("i");
      String string0 = Functions.findMax((List<String>) linkedList0);
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        Functions.findMax((List<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // List is empty or null
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.findMax((List<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // List is empty or null
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams("i", "CV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams("A", "A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams("+mB/w7[l,qm~)9#", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams("H75VPmjd{Gjr", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = Functions.areAnagrams((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Functions functions0 = new Functions();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 1);
      boolean boolean0 = functions0.containsElementWrong(linkedList0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Functions functions0 = new Functions();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 1);
      boolean boolean0 = functions0.containsElementWrong(linkedList0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Functions functions0 = new Functions();
      boolean boolean0 = functions0.isEvenWrong(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Functions functions0 = new Functions();
      Integer integer0 = new Integer(2);
      boolean boolean0 = functions0.isEvenWrong((int) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Functions functions0 = new Functions();
      // Undeclared exception!
      try { 
        functions0.divide(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Divider cannot be zero
         //
         verifyException("services.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.divide(2, 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.addWrong(1777, 1777);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.divideWrong(0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Functions functions0 = new Functions();
      int int0 = functions0.add(2, 2);
      assertEquals(4, int0);
  }
}
